#version 450

layout(binding = 0) uniform UniformBufferObject {
    vec4 pointAndPower;
    ivec2 dims;
    float rho;
    float mu;
    float dt;
} ubo;

layout (binding = 1, rgba32f) uniform readonly image2D prevFrame;
layout (binding = 2, rgba32f) uniform readonly image2D currFrame;
layout (binding = 3, rgba32f) uniform writeonly image2D tempTex;

layout (local_size_x = 32, local_size_y = 32) in;

ivec2 dims = ubo.dims;
float rho = ubo.rho;
float mu = ubo.mu;

void main(){
    bool isBoundary = (int(gl_GlobalInvocationID.x) == 0) || (int(gl_GlobalInvocationID.x) >= dims.x - 1) || 
                        (int(gl_GlobalInvocationID.y) >= dims.y - 1) || (int(gl_GlobalInvocationID.y) == 0);
    if(isBoundary){
        bool OnPosX = int(gl_GlobalInvocationID.x) == dims.x - 1;
        bool OnNegX = int(gl_GlobalInvocationID.x) == 0;
        bool OnPosY = int(gl_GlobalInvocationID.y) == dims.y - 1;
        bool OnNegY = int(gl_GlobalInvocationID.y) == 0;

        vec2 offset = int(OnPosX) * vec2(-1,0) + int(OnPosY) * vec2(0,-1) + int(OnNegX) * vec2(1,0) + int(OnNegY) * vec2(0,1);
        vec4 scale = vec4(vec2(-1.0f,-1.0f)  ,1.0f,1.0f);
        vec4 bv = scale * imageLoad(currFrame, ivec2(gl_GlobalInvocationID.xy + offset));

        imageStore(tempTex,ivec2(gl_GlobalInvocationID.xy),bv);
    }
    else{
        vec4 orig = imageLoad(currFrame,ivec2(gl_GlobalInvocationID.xy));
        vec2 vL = imageLoad(currFrame,ivec2(gl_GlobalInvocationID.xy) + ivec2(-1,0)).xy;
        vec2 vR = imageLoad(currFrame,ivec2(gl_GlobalInvocationID.xy) + ivec2(1,0)).xy;
        vec2 vB = imageLoad(currFrame,ivec2(gl_GlobalInvocationID.xy) + ivec2(0,-1)).xy;
        vec2 vT = imageLoad(currFrame,ivec2(gl_GlobalInvocationID.xy) + ivec2(0,1)).xy;
        float divergence = 0.5f * ((vR.x - vL.x) + (vT.y - vB.y));
        // left, right, bottom, and top x samples
        float pL = imageLoad(currFrame,ivec2(gl_GlobalInvocationID.xy) + ivec2(-1,0)).z;
        float pR = imageLoad(currFrame,ivec2(gl_GlobalInvocationID.xy) + ivec2(1,0)).z;
        float pB = imageLoad(currFrame,ivec2(gl_GlobalInvocationID.xy) + ivec2(0,-1)).z;
        float pT = imageLoad(currFrame,ivec2(gl_GlobalInvocationID.xy) + ivec2(0,1)).z;
        // b sample, from center
        float bC = divergence;
        // evaluate Jacobi iteration
        float alpha = - rho/ubo.dt;
        float beta = 0.25;

        imageStore(tempTex,ivec2(gl_GlobalInvocationID.xy),vec4(orig.xy,beta * (pL + pR + pB + pT + alpha * bC),orig.w ));
    }
}